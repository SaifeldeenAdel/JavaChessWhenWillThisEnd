Factory Design Pattern:
    - Allowed us to abstract the piece creation logic in our Chess game so that we can have a consistent way of generating
    diverse pieces while also encapsulating their instantiation details.
    - Creating both white and black pieces adheres better to the Single Responsibility Principle.
    The factory's responsibility is to create different types of pieces, regardless of their color.
    - We explored other patterns and thought they were not as suitable for this such as Abstract Factory Pattern,
    it was not suitable as we did not have multiple families of related objects, we just had one family (Piece) that has subclasses.

Command Design Pattern:
    - Allows us to separate movement execution into its own interface, abstracting the move implementation from the ChessGame class.
     The Game solely creates and executes a command, leaving the execution logic to the command implementation itself.
    - It also helped minimise the ChessGame class, making it easier to read and manage.

Strategy Design Pattern:
    - Allowed the breaking down the validation checks for each piece's movement and group together common movements.
    - Each piece class only calls a method that sets the piece for a validation check according to its type, abstracting the
      implementation of each piece's movement checks.
